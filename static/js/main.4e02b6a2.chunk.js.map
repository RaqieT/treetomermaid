{"version":3,"sources":["logo.svg","reportWebVitals.js","index.js","App.js","Branch.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","props","state","treeCmd","rootDirName","result","result64","handleChangeTreeCmd","bind","handleChangeRootDirName","handleSubmit","event","this","setState","target","value","json","Buffer","from","toString","slice","treeToMermaid","base64","branches","code","mermaid","updateEditor","autoSync","updateDiagram","generateGraphElements","length","forEach","element","el2","id","name","console","log","branch","Branch","loadBranches","JSON","stringify","getMermaidConfig","className","onSubmit","onChange","readOnly","style","marginBottom","onClick","href","React","Component","treeResult","replace","c","r","Math","random","first","second","defaultValue","tree","startTreeIndex","indexOf","startTreeIndexTwo","substring","treePart","allBranches","lines","split","pop","line","index","doesLineNotStartWithNewDirectoryChar","newName","counter","newTreePart","newBranch","el","push"],"mappings":"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","file":"static/js/main.4e02b6a2.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport React from 'react'\r\nimport Branch from './Branch'\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {treeCmd: '', rootDirName: '', result: '', result64: ''};\r\n\r\n    this.handleChangeTreeCmd = this.handleChangeTreeCmd.bind(this);\r\n    this.handleChangeRootDirName = this.handleChangeRootDirName.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n\r\n  }\r\n\r\n  handleChangeTreeCmd(event) {\r\n    this.setState({treeCmd: event.target.value});\r\n  }\r\n\r\n  handleChangeRootDirName(event) {\r\n    this.setState({rootDirName: event.target.value});\r\n  }\r\n\r\n  base64(json) {\r\n    return Buffer.from(json).toString('base64').slice(0, -2);\r\n  }\r\n\r\n  handleSubmit() {\r\n    let json = this.treeToMermaid(this.state.treeCmd, this.state.rootDirName);\r\n    this.setState({result: json, result64: this.base64(json)});\r\n  }\r\n\r\n  getMermaidConfig(branches) {\r\n    let result = {\r\n        code: \"graph TD\\n\",\r\n        mermaid: \"{\\n  \\\"theme\\\": \\\"default\\\"\\n}\",\r\n        updateEditor: false, \r\n        autoSync: false, \r\n        updateDiagram: false};\r\n    \r\n    result.code += this.generateGraphElements(branches);\r\n    \r\n    return result;\r\n  }\r\n\r\n  generateGraphElements(branches) {\r\n    let result = \"\"\r\n    \r\n    if (branches.length == 0) {\r\n        return result;\r\n    }\r\n\r\n    branches.forEach(element => {\r\n        element.branches.forEach(el2 => {\r\n            result += \"    \" + element.id + \"[\" + element.name + \"] --> \" + el2.id + \"[\" + el2.name + \"]\" + '\\n';\r\n        })\r\n    });\r\n    result += \" \";\r\n    console.log(result);\r\n    return result;\r\n  }\r\n\r\n  treeToMermaid(treeCmd, rootDirName) {\r\n    let branch = new Branch(rootDirName, treeCmd);\r\n    let branches = branch.loadBranches();\r\n    console.log(branch);\r\n    console.log(branches);\r\n    let result = JSON.stringify(this.getMermaidConfig(branches));\r\n    console.log(result);\r\n    return result;\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <header className=\"App-header\">\r\n          <form onSubmit={this.handleSubmit}>\r\n            <p>\r\n              Input root dir name:\r\n            </p>\r\n            <textarea value={this.state.rootDirName} onChange={this.handleChangeRootDirName} />\r\n            <p>\r\n              Input tree command text:\r\n            </p>\r\n            <textarea value={this.state.treeCmd} onChange={this.handleChangeTreeCmd} /><br/>\r\n            <input readOnly={true} className='btn' value=\"Convert\" style={{marginBottom: '2em'}} onClick={this.handleSubmit} />\r\n            <p>\r\n            Result mermaid input:\r\n            </p>\r\n            <textarea value={this.state.result} readOnly={true}/>\r\n            <p>\r\n            B64ed:\r\n            </p>\r\n            <textarea value={this.state.result64} readOnly={true}/><br/>\r\n            <a className='btn' href={'https://mermaid-js.github.io/mermaid-live-editor/edit#' + this.state.result64}>See diagram</a>\r\n          </form>\r\n        </header>\r\n\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n  \r\n}\r\n\r\nexport default App;\r\n","let BRANCH_NAME_INDEX = 4;\r\n\r\nfunction minButNotMinusOne(first, second, defaultValue) {\r\n    if (first === -1) {\r\n        if (second === -1) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return second;\r\n    }\r\n\r\n    if (second === -1) {\r\n        return first;\r\n    }\r\n\r\n    if (first < second) {\r\n        return first;\r\n    }\r\n\r\n    return second;\r\n};\r\n\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  };\r\n\r\nclass Branch {\r\n\r\n    constructor(name, treeResult) {\r\n        this.branches = [];\r\n        this.name = name;\r\n        this.id = uuidv4();\r\n        let startTreeSign = \"├\";\r\n        let startTreeSignSecondOne = \"└\";\r\n        let tree = treeResult + \"\";\r\n\r\n        let startTreeIndex = tree.indexOf(startTreeSign);\r\n        let startTreeIndexTwo = tree.indexOf(startTreeSignSecondOne);\r\n\r\n        tree = tree.substring(minButNotMinusOne(startTreeIndex, startTreeIndexTwo));\r\n        this.treePart = tree;\r\n    }\r\n\r\n    loadBranches() {\r\n        let allBranches = [this];\r\n        var lines = this.treePart.split('\\n');\r\n        if (lines[lines.length - 1] === \"\") {\r\n            lines.pop();\r\n        }\r\n        lines.forEach((line, index) => {\r\n            if (this.doesLineNotStartWithNewDirectoryChar(lines, index)) {\r\n                return; // skip inner lines\r\n            }\r\n\r\n            let newName = line.substring(BRANCH_NAME_INDEX, line.length);\r\n            let counter = index + 1;\r\n            let newTreePart = \"\";\r\n            while (lines[counter] && this.doesLineNotStartWithNewDirectoryChar(lines, counter) && counter < lines.length) {\r\n                newTreePart += lines[counter].substring(BRANCH_NAME_INDEX) + '\\n';\r\n                counter += 1;\r\n            }\r\n            \r\n            let newBranch = new Branch(newName, newTreePart);\r\n            newBranch.loadBranches().forEach(el => allBranches.push(el));\r\n            this.branches.push(newBranch);\r\n        });\r\n        return allBranches;\r\n    }\r\n\r\n    doesLineNotStartWithNewDirectoryChar(lines, index) {\r\n        return lines[index].indexOf('└') !== 0 && lines[index].indexOf('├') !== 0\r\n    }\r\n\r\n}\r\n\r\nexport default Branch;\r\n"],"sourceRoot":""}