{"version":3,"sources":["logo.svg","reportWebVitals.js","index.js","Branch.js","App.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById","Branch","name","treeResult","this","branches","id","replace","c","r","Math","random","toString","first","second","defaultValue","tree","startTreeIndex","indexOf","startTreeIndexTwo","substring","treePart","allBranches","lines","split","length","pop","forEach","line","index","doesLineNotStartWithNewDirectoryChar","newName","counter","newTreePart","newBranch","loadBranches","el","push","props","state","treeCmd","rootDirName","result","result64","handleChangeTreeCmd","bind","handleChangeRootDirName","handleSubmit","event","setState","target","value","json","Buffer","from","slice","treeToMermaid","base64WithoutEqualsInTheEnd","str","window","btoa","unescape","encodeURIComponent","code","mermaid","updateEditor","autoSync","updateDiagram","generateGraphElements","element","el2","console","log","branch","JSON","stringify","getMermaidConfig","className","onSubmit","onChange","readOnly","style","marginBottom","onClick","href","React","Component"],"mappings":"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","file":"static/js/main.f62a3a4b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","let BRANCH_NAME_INDEX = 4;\r\n\r\nfunction minButNotMinusOne(first, second, defaultValue) {\r\n    if (first === -1) {\r\n        if (second === -1) {\r\n            return defaultValue;\r\n        }\r\n\r\n        return second;\r\n    }\r\n\r\n    if (second === -1) {\r\n        return first;\r\n    }\r\n\r\n    if (first < second) {\r\n        return first;\r\n    }\r\n\r\n    return second;\r\n};\r\n\r\nfunction uuidv4() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n      var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n      return v.toString(16);\r\n    });\r\n  };\r\n\r\nclass Branch {\r\n\r\n    constructor(name, treeResult) {\r\n        this.branches = [];\r\n        this.name = name;\r\n        this.id = uuidv4();\r\n        let startTreeSign = \"├\";\r\n        let startTreeSignSecondOne = \"└\";\r\n        let tree = treeResult + \"\";\r\n\r\n        let startTreeIndex = tree.indexOf(startTreeSign);\r\n        let startTreeIndexTwo = tree.indexOf(startTreeSignSecondOne);\r\n\r\n        tree = tree.substring(minButNotMinusOne(startTreeIndex, startTreeIndexTwo));\r\n        this.treePart = tree;\r\n    }\r\n\r\n    loadBranches() {\r\n        let allBranches = [this];\r\n        var lines = this.treePart.split('\\n');\r\n        if (lines[lines.length - 1] === \"\") {\r\n            lines.pop();\r\n        }\r\n        lines.forEach((line, index) => {\r\n            if (this.doesLineNotStartWithNewDirectoryChar(lines, index)) {\r\n                return; // skip inner lines\r\n            }\r\n\r\n            let newName = line.substring(BRANCH_NAME_INDEX, line.length);\r\n            let counter = index + 1;\r\n            let newTreePart = \"\";\r\n            while (lines[counter] && this.doesLineNotStartWithNewDirectoryChar(lines, counter) && counter < lines.length) {\r\n                newTreePart += lines[counter].substring(BRANCH_NAME_INDEX) + '\\n';\r\n                counter += 1;\r\n            }\r\n            \r\n            let newBranch = new Branch(newName, newTreePart);\r\n            newBranch.loadBranches().forEach(el => allBranches.push(el));\r\n            this.branches.push(newBranch);\r\n        });\r\n        return allBranches;\r\n    }\r\n\r\n    doesLineNotStartWithNewDirectoryChar(lines, index) {\r\n        return lines[index].indexOf('└') !== 0 && lines[index].indexOf('├') !== 0\r\n    }\r\n\r\n}\r\n\r\nexport default Branch;\r\n","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react'\nimport Branch from './Branch'\nimport { BRANCH_REPO } from './Branch'\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {treeCmd: '', rootDirName: '', result: '', result64: ''};\n\n    this.handleChangeTreeCmd = this.handleChangeTreeCmd.bind(this);\n    this.handleChangeRootDirName = this.handleChangeRootDirName.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n\n  }\n\n  handleChangeTreeCmd(event) {\n    this.setState({treeCmd: event.target.value});\n  }\n\n  handleChangeRootDirName(event) {\n    this.setState({rootDirName: event.target.value});\n  }\n\n  base64WithoutEqualsInTheEnd(json) {\n    return Buffer.from(json).toString('base64').slice(0, -2);\n  }\n\n  handleSubmit() {\n    let json = this.treeToMermaid(this.state.treeCmd, this.state.rootDirName);\n    this.setState({result: json, result64: this.base64WithoutEqualsInTheEnd(json)});\n  }\n\n  utf8_to_b64( str ) {\n    return window.btoa(unescape(encodeURIComponent( str )));\n  }\n\n  getMermaidConfig(branches) {\n    let result = {\n        code: \"graph TD\\n\",\n        mermaid: \"{\\n  \\\"theme\\\": \\\"default\\\"\\n}\",\n        updateEditor: false, \n        autoSync: false, \n        updateDiagram: false};\n    \n    result.code += this.generateGraphElements(branches);\n    \n    return result;\n  }\n\n  generateGraphElements(branches) {\n    let result = \"\"\n    \n    if (branches.length == 0) {\n        return result;\n    }\n\n    branches.forEach(element => {\n        element.branches.forEach(el2 => {\n            result += \"    \" + element.id + \"[\" + element.name + \"] --> \" + el2.id + \"[\" + el2.name + \"]\" + '\\n';\n        })\n    });\n    result += \" \";\n    console.log(result);\n    return result;\n  }\n\n  treeToMermaid(treeCmd, rootDirName) {\n    let branch = new Branch(rootDirName, treeCmd);\n    let branches = branch.loadBranches();\n    console.log(branch);\n    console.log(branches);\n    let result = JSON.stringify(this.getMermaidConfig(branches));\n    console.log(result);\n    return result;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <form onSubmit={this.handleSubmit}>\n            <p>\n              Input root dir name:\n            </p>\n            <textarea value={this.state.rootDirName} onChange={this.handleChangeRootDirName} />\n            <p>\n              Input tree command text:\n            </p>\n            <textarea value={this.state.treeCmd} onChange={this.handleChangeTreeCmd} /><br/>\n            <input readOnly={true} className='btn' value=\"Convert\" style={{marginBottom: '2em'}} onClick={this.handleSubmit} />\n            <p>\n            Result mermaid input:\n            </p>\n            <textarea value={this.state.result} readOnly={true}/>\n            <p>\n            B64ed:\n            </p>\n            <textarea value={this.state.result64} readOnly={true}/><br/>\n            <a className='btn' href={'https://mermaid-js.github.io/mermaid-live-editor/edit#' + this.state.result64}>See diagram</a>\n          </form>\n        </header>\n\n\n\n      </div>\n    );\n  }\n  \n}\n\nexport default App;\n"],"sourceRoot":""}